{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/progress-status-using-pipe-viewer-while-importing-my-sql-databases","result":{"data":{"markdownRemark":{"html":"<p>One of the common command on Linux is to compress or decompress files and folders. While it's easy to do, there is no progress bar\nfor usual command such as Tar, Zip, Importing to Database or Exporting logs. It may be interesting that there are lots of tools to use. However, I found\n<a href=\"http://www.ivarch.com/programs/pv.shtml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pipe Viewer</a> very handy and useful. </p>\n<p><strong>PV</strong> <em>[Pipe Viewer]</em> is a terminal-based tool for monitoring\nthe progress of data through a pipeline. It can be inserted into any normal pipeline between two processes to give a visual indication of\nhow quickly data is passing through, how long it has taken, how near to completion it is, and an estimate of how long it will be until completion.</p>\n<h3 id=\"some-of-the-benefits-of-using-pv-are\" style=\"position:relative;\"><a href=\"#some-of-the-benefits-of-using-pv-are\" aria-label=\"some of the benefits of using pv are permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Some of the benefits of using PV are:</h3>\n<ul>\n<li>Total data transferred</li>\n<li>Time elapsed</li>\n<li>Current throughput rate</li>\n<li>Percentage completed</li>\n<li>ETA</li>\n</ul>\n<h3 id=\"to-install-pv-follow-the-guides-below-depends-on-your-os\" style=\"position:relative;\"><a href=\"#to-install-pv-follow-the-guides-below-depends-on-your-os\" aria-label=\"to install pv follow the guides below depends on your os permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To Install PV, follow the guides below depends on your OS:</h3>\n<ul>\n<li><strong>CentOS / RHEL:</strong>\tSet up my YUM repository or use RepoForge, then do <code class=\"language-text\">yum install pv</code>.</li>\n<li><strong>Fedora:</strong>\tRun <code class=\"language-text\">yum install pv</code>; the \"extras\" repository may be required.</li>\n<li><strong>Debian / Ubuntu:</strong>\tRun <code class=\"language-text\">apt-get install pv</code> to get the latest packaged version from <code class=\"language-text\">unstable</code> / <code class=\"language-text\">testing</code>.</li>\n<li><strong>Slackware:</strong>\tUse this SlackBuild script.</li>\n<li><strong>Cygwin:</strong>\tAvailable as a package.</li>\n<li><strong>FreeBSD:</strong> Listed on FreshPorts.</li>\n<li><strong>OpenBSD:</strong> Listed under ports.</li>\n<li><strong>Solaris:</strong> Download binary packages from OpenCSW.</li>\n<li><strong>OpenSolaris:</strong>\tIncludes pv version 1.1.4 in the <code class=\"language-text\">/dev</code> repository (as of build 119). Install with <code class=\"language-text\">pkg install SUNWpipe-viewer</code>.</li>\n<li><strong>AIX:</strong> An RPM from <em>Pawel Piatek</em> is in the downloads section.</li>\n<li><strong>MacPorts:</strong>\tRun <code class=\"language-text\">port install pv</code> to get the latest version. </li>\n<li><strong>Mac HomeBrew:</strong>\tRun <code class=\"language-text\">brew update &amp; brew install pv</code> to get the latest version. </li>\n<li><strong>Exherbo:</strong>\tRun <code class=\"language-text\">cave resolve -x app-misc/pv</code> to get the latest version. </li>\n<li><strong>Gentoo:</strong>\tRun <code class=\"language-text\">emerge sys-apps/pv</code> to get the latest version. </li>\n<li><strong>IRIX Nekoware:</strong>\tAvailable in the <em>Nekoware</em> \"beta\" repository.</li>\n</ul>\n<p>As an example, I would like to start with using PV while importing a dump of <strong>MySQL</strong> database. </p>\n<p>You are able to import your <code class=\"language-text\">.sql</code> file into the database as easy as the command below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql --user=username --password=password database_name &lt; dump.sql</code></pre></div>\n<p>which in short is equivalent to </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql -u username -p password database_name &lt; dump.sql</code></pre></div>\n<p>Although it seems quite OK, It is not as helpful as it looks when you have a big file.\nWe might have considered better solution as we need to know the status of progress for our\nrecord. Therefore, here is the usage of PV while importing our dump. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pv your_dump.sql | mysql -u root database_name</code></pre></div>\n<p>In this case, you are able to see the progress bar just as below:</p>\n<p><img src=\"/assets/images/dec2016/pv-sample.jpg\" alt=\"PV Status Bar\" title=\"Pipe Viewer example\"></p>\n<h3 id=\"more-examples-to-monitor-of-pv-data-progress-sent-via-a-pipe\" style=\"position:relative;\"><a href=\"#more-examples-to-monitor-of-pv-data-progress-sent-via-a-pipe\" aria-label=\"more examples to monitor of pv data progress sent via a pipe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More examples to Monitor of PV data progress, sent via a Pipe:</h3>\n<p>1- To copy a file called your_access.log to /tmp/something-access.log and show progress:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pv your_access.log &gt; /tmp/something-access.log</code></pre></div>\n<p>2- To compress a lot of files within a folder and seeing progress bar</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tar cf - /folder-with-big-files -P | pv -s $(du -sb /folder-with-big-files | awk &#39;{print $1}&#39;) | gzip &gt; big-files.tar.gz</code></pre></div>\n<p>3- To watch how quickly a file is transferred using nc(1):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pv file | nc -w 1 somewhere.com 3000</code></pre></div>\n<p>4- To transfer a file from another process and passing the expected size to pv:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat file | pv -s 12345 | nc -w 1 majidhajian.com 3000</code></pre></div>\n<p>5- To decompress a huge tar.gz file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pv file.tgz | tar xzf - -C target_directory</code></pre></div>\n<p>All in all, Result of all of them like I added a picture to show, is similar as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">12.16MB 0:00:20 [6.06MB/s] [==================&gt;               ] 55%  ETA 0:00:37</code></pre></div>\n<p>I encourage you to read more about this amazing tool and be familiar with that. I have plan to\npublish another article about <code class=\"language-text\">screen</code> which is another great tool and combination of both, will make your\nlife as a developer more relaxed. </p>","fields":{"slug":"progress-status-using-pipe-viewer-while-importing-my-sql-databases"},"frontmatter":{"title":"Progress status using PipeViewer while importing MySQL databases","date":"07.12.2016","category":"DevOps","tags":["linux","mysql"],"banner":""},"timeToRead":3}},"pageContext":{"slug":"progress-status-using-pipe-viewer-while-importing-my-sql-databases","prev":null,"next":{"excerpt":"Decision made While we were developing our affiliate manager software in my company, we (development team) decided to migrate raw data from \na 3rd party MySQL(MariaDB) database which company was using to our Rails default db engine which wasâ€¦","html":"<h2 id=\"decision-made\" style=\"position:relative;\"><a href=\"#decision-made\" aria-label=\"decision made permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decision made</h2>\n<p>While we were developing our <em>affiliate manager software</em> in my company, we (development team) decided to migrate raw data from\na 3rd party <strong>MySQL</strong>(MariaDB) database which company was using to our <strong>Rails</strong> default db engine which was <strong>PostgresSQL</strong>.\nThus, I was assigned to do this task. </p>\n<p>I went through many available tools and tested as much as possible. I could not make sure they all are capable\nof handling such a massive sql file. I was about to decide witting a migration script with <strong>NodeJS</strong> that\nI finally found <a href=\"http://pgloader.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pgloader</a> by <a href=\"https://twitter.com/tapoueh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dimitri Fontaine</a>. </p>\n<p>First, It looked to me very promising and I said to myself: \"Yes, this is it.\". Before counting, let me say what is Pgloader. </p>\n<blockquote>pgloader is a data loading tool for PostgreSQL, using the COPY command.\nIts main advantage over just using COPY or \\copy, and over using a Foreign Data Wrapper, is its transaction behaviour, where pgloader will keep a separate file of rejected data, but continue trying to copy good data in your database.\nThe default PostgreSQL behaviour is transactional, which means that any erroneous line in the input data (file or remote database) will stop the entire bulk load for the table.\npgloader also implements data reformatting, a typical example of that being the transformation of MySQL datestamps 0000-00-00 and 0000-00-00 00:00:00 to PostgreSQL NULL value (because our calendar never had a year zero).\n</blockquote>\n<p>I started testing that with different circumstances and all test was pretty good. Therefore, I gave it a try and\nrun the final command to migrate that the result was pretty awesome in my Mac and I was excited though:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Successfully migrated from <a href=\"https://twitter.com/hashtag/MySQL?src=hash\">#MySQL</a> 5 to <a href=\"https://twitter.com/hashtag/PostgreSQL?src=hash\">#PostgreSQL</a> 9.5, roughly 16GB data, thanks to <a href=\"https://twitter.com/tapoueh\">@tapoueh</a> for a fantastic <a href=\"https://twitter.com/hashtag/pgloader?src=hash\">#pgloader</a> tool <a href=\"https://t.co/8lDziCnJqV\">pic.twitter.com/8lDziCnJqV</a></p>&mdash; Majid Hajian (@mhadaily) <a href=\"https://twitter.com/mhadaily/status/806763214092414976\">December 8, 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Although, everything was pretty good on my local machine while I wanted to do that in our <strong>EC2</strong>, I faced with many difficulties as\nour server was not as perfect as my local machine with a low memory as small as 512MB until I made <a href=\"http://ccl.clozure.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ClozureCL</a> on the Ubuntu as a default\ncompiler for <a href=\"https://www.common-lisp.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lisp</a> which is written's lagrange of Pgloader and performance was incredibly unbelievable. </p>\n <blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/ClozureCL?src=hash\">#ClozureCL</a> instead of <a href=\"https://twitter.com/hashtag/SBCL?src=hash\">#SBCL</a> while migrating <a href=\"https://twitter.com/hashtag/MySQL?src=hash\">#MySQL</a> to <a href=\"https://twitter.com/hashtag/PostgreSQL?src=hash\">#PostgreSQL</a> with 16GB data on <a href=\"https://twitter.com/hashtag/AWS?src=hash\">#AWS</a> <a href=\"https://twitter.com/hashtag/EC2?src=hash\">#EC2</a> 512MB RAM!! That&#39;s awesome, thanks <a href=\"https://twitter.com/tapoueh\">@tapoueh</a></p>&mdash; Majid Hajian (@mhadaily) <a href=\"https://twitter.com/mhadaily/status/807632035300769792\">December 10, 2016</a></blockquote>\n <script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n \nI encourage you to watch this video : [http://pgloader.io/](Why did pgloader get so much faster?). \n<p>Even though, many different ways of conversions are provided by Pgloader, I pick only migration from Mysql part and write my experience with that.\nHowever, feel free to check Pgloader website's documentation and do more with less!</p>\n<h2 id=\"pgloader-installation\" style=\"position:relative;\"><a href=\"#pgloader-installation\" aria-label=\"pgloader installation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pgloader installation</h2>\n<p>Hopefully, Pgloader developed with increasing productivity and performance in mind. So, it is predictable that installing\nthis tools would be as easy as a command. To start with that you can read <a href=\"http://pgloader.io/howto/quickstart.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quick Start</a> on pgloader.io. </p>\n<p>Binary build are available on distributions where pgloader is packaged, which currently includes only <strong>debian</strong> and <strong>apt.postgresql.org</strong> which covers both <strong>debian</strong> and <strong>ubuntu</strong> Operating Systems.</p>\n<p>Note that pgloader is easy enough to build from sources, see pgloader INSTALL.md file. For RPM based systems, see also the bootstrap-centos7.sh script that prepares your build environment so that building is then just a git clone then make away.</p>\n<p>Building for the <strong>Windowsâ„¢ Operating System</strong> is easy enough and the platform is fully supported.</p>\n<ul>\n<li><strong>Mac</strong> <code class=\"language-text\">brew install pgloader</code></li>\n<li><strong>Ubuntu</strong> <code class=\"language-text\">apt-get install pgloader</code></li>\n<li><strong>Docker</strong>: You can also use a docker image for pgloader at <a href=\"https://hub.docker.com/r/dimitri/pgloader/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://hub.docker.com/r/dimitri/pgloader/</a> </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker pull dimitri/pgloader\n$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --version\n$ docker run --rm --name pgloader dimitri/pgloader:latest pgloader --help</code></pre></div>\n<ul>\n<li><strong>Build From Source</strong> Pgloader is now a Common Lisp program, tested using the SBCL (>= 1.1.14) and Clozure CL implementations with Quicklisp.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev\ncd /path/to/pgloader\nmake pgloader\n./build/bin/pgloader --help</code></pre></div>\n<ul>\n<li><strong>Repository</strong>: <a href=\"https://github.com/dimitri/pgloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">To learn more information</a></li>\n</ul>\n<p>Please feel free to drop me an email if you need more help.</p>\n<h2 id=\"better-performance-with-clozurecl\" style=\"position:relative;\"><a href=\"#better-performance-with-clozurecl\" aria-label=\"better performance with clozurecl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Better Performance with ClozureCL</h2>\n<p>One of the important problem that I faced, was low memory and killing process by pgloader on our EC2 which has 512MB ram. So,\nDimitri in one of the issue on Github Suggest to use CCL instead of SBCL so I also recommend to do it as the performance is significantly\nbetter and no issue in dropping process because lack of memory. </p>\n<p>The preferred way to get Clozure CL is via Subversion. For example, to get Clozure CL 1.11 for Darwin/x86, you'd type (where the $ is the shell prompt):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">svn co http://svn.clozure.com/publicsvn/openmcl/release/1.11/darwinx86/ccl</code></pre></div>\n<p>Please follow all the steps (here)(<a href=\"http://ccl.clozure.com/download.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://ccl.clozure.com/download.html</a>) and after making that done remember to make Pgloader with CCL as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">make CL=ccl pgloader</code></pre></div>\n<p>Now, We are all good to begin.</p>\n<h2 id=\"migrating-from-mysql\" style=\"position:relative;\"><a href=\"#migrating-from-mysql\" aria-label=\"migrating from mysql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Migrating from MySQL</h2>\n<p>Just create a database where to host the MySQL data and definitions and have pgloader do the migration for you in a single command line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">createdb pgdb</code></pre></div>\n<p>a single simple command to start, is just as easy as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pgloader mysql://user@localhost/mydb postgresql:///pgdb </code></pre></div>\n<p>where you can expand your Postgresql link as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">postgres://username:password@server:port/databasename</code></pre></div>\n<p>but it my not be enough. For instance, if you are connection to a remote database such a database on <strong>Heroku</strong> where\nit consumes SSL as default, you need to add your params to the url to enable ssl, so command would be as below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">postgres://username:password@server:port/databasename?sslmode=require</code></pre></div>\n<p>So, if you want to load your pg dump to Heroku you can run as simple as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">heroku pg:psql HEROKU_POSTGRESQL_GREEN_URL --app YOUR_APP_NAME_HERE &lt; pgdump</code></pre></div>\n<h2 id=\"common-issues\" style=\"position:relative;\"><a href=\"#common-issues\" aria-label=\"common issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common issues</h2>\n<p>You may see the following error for first time: <code class=\"language-text\">this is incompatible with sql_mode=only_full_group_by</code>\nbut no worries you can easily bypass that.\nYou can try to disable the only<em>full</em>group_by setting by executing the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql&gt; set global sql_mode=&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;</code></pre></div>\n<p>or </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql&gt; set session sql_mode=&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;</code></pre></div>\n<p>I hope you find this post helpful and feel free to drop an email your feedback which is already appreciated.</p>","id":"dfa733e0-c45d-5ce6-9566-d6babb618589","fields":{"slug":"pgloader-makes-that-easy-to-migrate-from-mysql-to-postgresql"},"frontmatter":{"date":"2016-12-08","title":"Pgloader makes that easy to migrate From Mysql to Postgresql","category":"DevOps","tags":["databases","mysql","postgresql"],"banner":""},"timeToRead":6}}}}